[workspace]
members = [".", "codegen", "fuzz"]
resolver = "2"

[workspace.package]
edition = "2021"
license = "MIT OR Apache-2.0"
rust-version = "1.87"

[package]
name = "blackbox-log"
version = "0.4.3"
description = "Ergonomic parser for BetaFlight blackbox logs"
repository = "https://github.com/blackbox-log/blackbox-log"
readme = "README.md"
categories = ["aerospace::drones", "aerospace::unmanned-aerial-vehicles", "parser-implementations", "no-std", "encoding"]
keywords = ["betaflight", "blackbox"]

include = ["/src/**/*", "/tests/snapshots.rs", "/benches/parse.rs", "/README.md"]

license.workspace = true
edition.workspace = true
rust-version.workspace = true

[features]
default = ["std"]
std = ["memchr/std", "serde?/std", "uom/std"]
_serde = ["dep:serde"]

[dependencies]
bitvec = { version = "^1.0.0", default-features = false }
hashbrown = ">=0.12.0, <0.16.0"
memchr = { version = "^2.4.0", default-features = false }
serde = { version = "^1.0.96", default-features = false, features = ["alloc", "derive"], optional = true }
time = { version = "^0.3.3", default-features = false, features = ["macros", "parsing"] }
tracing = { version = "^0.1.16", default-features = false, features = ["attributes"] }
uom = { version = ">=0.34.0, <0.36.1", default-features = false, features = ["si", "f64"] }

[dev-dependencies]
criterion = { version = "^0.5.1", features = ["html_reports"] }
insta = { version = "^1.42.2", default-features = false, features = ["colors", "glob", "ron"] }
test-case = "^3.3.1"

[profile.dev.package.insta]
opt-level = 3

[profile.dev.package.similar]
opt-level = 3

[lib]
bench = false

[[bench]]
name = "parse"
harness = false

[[test]]
name = "snapshots"
required-features = ["_serde"]

[lints]
workspace = true

[workspace.lints.rust]
explicit_outlives_requirements = "warn"
improper_ctypes_definitions = "deny"
macro_use_extern_crate = "warn"
missing_debug_implementations = "warn"
single_use_lifetimes = "warn"
trivial_casts = "deny"
unsafe_code = "deny"
unused_qualifications = "warn"

[workspace.lints.clippy]
alloc_instead_of_core = "warn"
as_underscore = "deny"
borrow_as_ptr = "warn"
cast_lossless = "deny"
cast_possible_truncation = "warn"
cast_possible_wrap = "warn"
cast_sign_loss = "warn"
clone_on_ref_ptr = "warn"
cloned_instead_of_copied = "warn"
dbg_macro = "warn"
decimal_literal_representation = "warn"
default_trait_access = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
from_iter_instead_of_collect = "warn"
get_unwrap = "warn"
if_not_else = "warn"
if_then_some_else_none = "warn"
implicit_clone = "warn"
inconsistent_struct_constructor = "warn"
items_after_statements = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
map_unwrap_or = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wildcard_for_single_variants = "warn"
mismatching_type_param_order = "warn"
# multiple_crate_versions = "warn"
multiple_inherent_impl = "warn"
needless_for_each = "warn"
option_if_let_else = "warn"
redundant_closure_for_method_calls = "warn"
redundant_else = "warn"
return_self_not_must_use = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
stable_sort_primitive = "warn"
str_to_string = "warn"
string_lit_as_bytes = "warn"
todo = "warn"
trait_duplication_in_bounds = "warn"
undocumented_unsafe_blocks = "deny"
unimplemented = "warn"
uninlined_format_args = "warn"
unnecessary_cast = "deny"
unneeded_field_pattern = "warn"
unnested_or_patterns = "warn"
unseparated_literal_suffix = "warn"
use_debug = "warn"
verbose_file_reads = "warn"
wildcard_enum_match_arm = "warn"
